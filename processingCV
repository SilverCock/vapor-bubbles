import cv2
import numpy as np
import matplotlib.pyplot as plt


image = cv2.imread('bubbletest.jpg')
if image is None:
    print("Ошибка: изображение не загружено!")
    exit()  

gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
blurred = cv2.GaussianBlur(
    src=gray, 
    ksize=(5, 5),  
    sigmaX=0     
)
edges = cv2.Canny(
    image=blurred,
    threshold1=50,   # Нижний порог
    threshold2=150   # Верхний порог
)
contours, hierarchy = cv2.findContours(

image=edges,

mode=cv2.RETR_TREE,

method=cv2.CHAIN_APPROX_SIMPLE

)
result = image.copy()
cv2.drawContours(
    image=result,
    contours=contours,
    contourIdx=-1,          
    color=(0, 255, 0),      # Зеленый цвет
    thickness=2        
)

def calculate_scale(image, reference_diameter_um=2):
    if image is None:
        raise ValueError("Изображение не загружено!")
    
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Автоматический подбор порога (Otsu)
    _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    
    # Морфологическое закрытие для удаления шума
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5,5))
    closed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
    
    contours, _ = cv2.findContours(closed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    if not contours:
        raise ValueError("Контуры не обнаружены. Проверьте изображение!")
    
    # Выбираем контур с максимальной площадью
    fiber_contour = max(contours, key=cv2.contourArea)
    (x, y), radius = cv2.minEnclosingCircle(fiber_contour)
    pixel_diameter = 2 * radius
    
    if pixel_diameter == 0:
        raise ValueError("Диаметр оптоволокна равен нулю!")
    
    scale = reference_diameter_um / pixel_diameter
    return scale

def detect_bubbles(image, scale):
    # Преобразование в градации серого и фильтрация
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    
    # Пороговая обработка (пример для темных пузырей на светлом фоне)
    _, thresh = cv2.threshold(blurred, 50, 255, cv2.THRESH_BINARY_INV)
    
    # Морфологическое закрытие для заполнения пробелов
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
    closed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel, iterations=2)
    
    # Поиск контуров
    contours, _ = cv2.findContours(closed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Фильтрация по размеру (диаметр ≥3 мкм)
    min_radius_um = 1.5  # 1.5 * 2 мкм / 2 = 1.5 мкм (радиус)
    min_radius_px = min_radius_um / scale
    
    bubbles = []
    for cnt in contours:
        (x, y), radius = cv2.minEnclosingCircle(cnt)
        if radius >= min_radius_px:
            bubbles.append((x, y, radius))
    
    return bubbles


def process_image(image_path, output_dir):
    # Загрузка изображения
    image = cv2.imread(image_path)
    
    # Калибровка масштаба
    scale = calculate_scale(image)
    
    # Детекция пузырей
    bubbles = detect_bubbles(image, scale)
    
    # Рисование результатов
    result = image.copy()
    radii_um = []
    for (x, y, r_px) in bubbles:
        r_um = r_px * scale
        radii_um.append(r_um)
        cv2.circle(result, (int(x), int(y)), int(r_px), (0, 255, 0), 2)
    
    # Сохранение изображения с детекцией
    cv2.imwrite(f"{output_dir}/result_{image_path.split('/')[-1]}", result)
    
    # Построение гистограммы
    plt.hist(radii_um, bins=20, range=(1.5, 10), edgecolor='black')
    plt.xlabel('Радиус пузыря (мкм)')
    plt.ylabel('Количество')
    plt.title('Распределение пузырей по радиусам')
    plt.savefig(f"{output_dir}/histogram_{image_path.split('/')[-1]}")
    plt.close()
    
    return len(bubbles), radii_um


if __name__ == "__main__":
    image_path = "laser_boiling.jpg"
    output_dir = "results"
    
    total_bubbles, radii = process_image(image_path, output_dir)
    print(f"Обнаружено пузырей: {total_bubbles}")
    print(f"Средний радиус: {np.mean(radii):.2f} мкм")

cv2.imshow('Original', image)
cv2.imshow('Edges', edges)
cv2.imshow('Result', result)
cv2.waitKey(0)              # Ожидание нажатия клавиши
cv2.destroyAllWindows()

cv2.imwrite('output_edges.jpg', edges)  # Сохранить границы
cv2.imwrite('output_result.jpg', result)  # Сохранить результат


